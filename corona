#!/bin/sh

# Author: Andrej Smatana <xsmata03@fit.vutbr.cz>

export POSIXLY_CORRECT=yes
export LC_NUMBERIC=en_US.UTF-8
export LC_ALL=C

print_help()
{
	echo -e	"Usage: corona [-h]"
	echo -e	"       corona [FILTERS] [COMMAND] [LOG [LOG2 [...]]\n"

	echo	"Commands:"
	echo	"	infected - counts total of infected"
	echo	"	merge - merges files with logs into 1 file"
	echo -e "	TODO \n" # TODO

	echo "Filters:"
	echo	"	-a DATETIME		process logs after DATETIME including the date itself (YYYY-MM-DD)"
	echo	"	-b DATETIME		process logs before DATETIME including the date itself"
	echo	"	-g GENDER		process logs of infected people of a GENDER (M - men, Z - women)"
	echo -e "	-s [WIDTH]		print data in the form of histograms (WIDTH sets width of histograms)\n"		

	echo "	-h			give this help list"
}

awk_filter()
{
  # print head and cut first character, which is space for unknown reason TODO
  head -n 1 $LOG_FILES | cut -c2-

  if [ -z "$FILTER_GENDER" ]; then
    awk -F ',' -v filter_after="$FILTER_AFTER" -v filter_before="$FILTER_BEFORE" '
    {if (NF == 9 && $2 >= filter_after && $2 <= filter_before) {print $0}}' $LOG_FILES
  else
    awk -F ',' -v filter_after="$FILTER_AFTER" -v filter_before="$FILTER_BEFORE" -v filter_gender="$FILTER_GENDER" '
    {if (NF == 9 && $2 >= filter_after && $2 <= filter_before && $4 == filter_gender) {print $0}}' $LOG_FILES
  fi
}

FILTER_AFTER=""
FILTER_BEFORE="9999-12-31"
FILTER_GENDER=""
FILTER_WIDTH="off"

COMMAND=off

GZ_LOG_FILES=""
LOG_FILES=""

# parsing filters
while [ $# -gt 0 ]; do
	key=$1
	shift
	case $key in
		-a|-after)
			if [ $# -lt 1 ]; then
				echo "error: Chybajuci argument k filtru -a"
				exit 1
			else
				if [ -z $FILTER_AFTER ]; then
					FILTER_AFTER=$1
					if ! [[ $FILTER_AFTER =~ ^[0-9]{4}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[0-1])$ ]]; then
            echo "error: Datum musi byt vo formate YYYY-MM-DDD"
            exit 1
          fi
				else
					echo "error: Filter moze byt pouzity len 1-krat."
					exit 1
				fi
			fi
			shift
			;;
		-b|-before)
			if [ $# -lt 1 ]; then
				echo "error: Chybajuci argument k filtru -b"
				exit 1
			else
				if [ "$FILTER_BEFORE" = "9999-12-31" ]; then
					FILTER_BEFORE=$1
					# https://stackoverflow.com/questions/21112707/check-if-a-string-matches-a-regex-in-bash-script
          # TODO what about february?
					if ! [[ $FILTER_BEFORE =~ ^[0-9]{4}[-](0[1-9]|1[0-2])[-](0[1-9]|[1-2][0-9]|3[0-1])$ ]]; then
					  echo "error: Datum musi byt vo formate YYYY-MM-DDD"
					  exit 1
					fi
				else
					echo "error: Filter moze byt pouzity len 1-krat."
					exit 1
				fi
			fi
			shift
			;;
	  -g)
	    if [ $# -lt 1 ]; then
	      echo "error: Chybajuci argument k filtru -g"
	      exit 1
	    else
	      if [ -z $FILTER_GENDER ]; then
	        FILTER_GENDER=$1
	        if ! [[ $FILTER_GENDER =~ ^[M]|[Z]$ ]]; then
	          echo "error: Parameter pohlavia moze byt len M alebo Z."
	          exit 1
	        fi
	      else
	        echo "error: Filter moze byt pouzity len 1-krat."
	        exit 1
	      fi
	    fi
	    shift
	    ;;
	  -w)
	    if [ $# -lt 1 ]; then
	      echo "error: Chybajuci argument k filtru -w."
	      exit 1
	    else
	      if [ "$FILTER_WIDTH" = "off" ]; then
	        FILTER_WIDTH=$1
	        if ! [[ $FILTER_WIDTH =~ ^[0-9]+$ ]]; then
	          echo "error: Parameter sirky musi byt cele kladne cislo."
	          exit 1
	        fi
	      else
	        echo "error: Filter moze byt pouzity len 1-krat."
	        exit 1
	      fi
	    fi
	    shift
	    ;;
	  infected|merge|gender|age|daily|monthly|yearly|countries|districts|regions)
	    if [ "$COMMAND" = "off" ]; then
	      COMMAND=$key
	    else
	      echo "error: Prikaz moze byt uvedeny len raz."
	      exit 1
	    fi
	    ;;
	  -h)
	    print_help
	    break
	    ;;
	  *.gz|*.bz2) #TODO TEMPORARY
	    GZ_LOG_FILES=$key
	    ;;
	  *.csv)
	    LOG_FILES=$key
	    ;;
	  *)
	    echo "error: Prikaz \"$key\" je neznamy. Precitajte si manual!\n"
	    print_help
	    exit 1
	    ;;
	esac
done

case $COMMAND in
  infected)
    awk_filter | sed '1d' | wc -l
    ;;
  age)
    awk -F ',' 'NR>1 {
      if ($3 >= 0 && $3 <= 5)
        a["0-5   "]++;
      else if ($3 > 5 && $3 <= 15)
        a["6-15  "]++;
      else if ($3 > 15 && $3 <= 25)
        a["16-25 "]++;
      else if ($3 > 25 && $3 <= 35)
        a["26-35 "]++;
      else if ($3 > 35 && $3 <= 45)
        a["36-45 "]++;
      else if ($3 > 45 && $3 <= 55)
        a["46-55 "]++;
      else if ($3 > 55 && $3 <= 65)
        a["56-65 "]++;
      else if ($3 > 65 && $3 <= 75)
        a["66-75 "]++;
      else if ($3 > 75 && $3 <= 85)
        a["76-85 "]++;
      else if ($3 > 85 && $3 <= 95)
        a["86-95 "]++;
      else if ($3 > 95 && $3 <= 105)
        a["96-105"]++;
      else if ($3 > 105)
        a[">105  "]++;
      else
        a["None  "]++;
      } END{for(i in a) print i ": " a[i]}' $LOG_FILES | sort -V
    ;;
  merge)
    uniq $LOG_FILES
    ;;
  gender)
    awk -F ',' 'NR>1 {a[$4]++} END{for(i in a) print i ": " a[i]}' $LOG_FILES
    ;;
  daily)
    awk -F ',' 'NR>1 {a[$2]++} END{for(i in a) print i ": " a[i]}' $LOG_FILES | sort
    ;;
  monthly)
    awk -F '[,-]' 'NR>1 {a[$6 "-" $7]++} END{for (i in a) print i ": " a[i]}' $LOG_FILES | sort
    ;;
  yearly)
    awk -F '[,-]' 'NR>1 {a[$6]++} END{for (i in a) print i ": " a[i]}' $LOG_FILES | sort
    ;;
  countries)
    awk -F ',' 'NR>1 {if (!(($8 == "CZ") || ($8 == ""))) a[$8]++}
                  END{for (i in a) print i ": " a[i]}' $LOG_FILES | sort
    ;;
  districts)
    awk -F ',' '  BEGIN {count=0;} NR>1 {a[$6]++; if ($6 == "") count+=1}
                  END   {for(i in a) print i ": " a[i]; print "None: " count}' $LOG_FILES | sort
    ;;
  regions)
    awk -F ',' '  BEGIN {count=0;} NR>1 {a[$5]++; if ($5 == "") count+=1}
                  END   {for(i in a) print i ": " a[i]; print "None: " count}' $LOG_FILES | sort
    ;;
  off)
    awk_filter
    ;;
esac

#READ_INPUT="gzip -d -c -f $GZ_LOG_FILES | cat $LOG_FILES -"
#eval $READ_INPUT | awk -vFS=, '$8 == "CZ"{print $0}' osoby.csv  | wc -l
  # https://stackoverflow.com/questions/18748933/user-input-date-format-verification-in-bash/18748968#18748968